//------------------------------------------------------------------------------
// <auto-generated>
//     Tento kód byl generován nástrojem.
//     Verze modulu runtime:4.0.30319.18033
//
//     Změny tohoto souboru mohou způsobit nesprávné chování a budou ztraceny,
//     dojde-li k novému generování kódu.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;

namespace Fenix.WebService
{
    /// <summary>Autentifikační token.</summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AuthToken", Namespace="https://ws8websecdb.upc.cz/AuthService")]
    [Serializable()]
    public partial class AuthToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>Hodnota tokenu zakódována v base-64.</summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ValueField, value) != true))
                {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>Výsledek autentifikace.</summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AuthResult", Namespace="https://ws8websecdb.upc.cz/AuthService")]
    [Serializable()]
    public partial class AuthResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string AppIdField;
        
        [OptionalField()]
        private string StatusDescField;
        
        [OptionalField()]
        private short StatusIdField;
        
        [OptionalField()]
        private int UnsuccessfulAttemptsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>Aplikační identifikátor.</summary>
        [DataMember()]
        public string AppId
        {
            get
            {
                return this.AppIdField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AppIdField, value) != true))
                {
                    this.AppIdField = value;
                    this.RaisePropertyChanged("AppId");
                }
            }
        }
        
        /// <summary>Popis statusu.</summary>
        [DataMember()]
        public string StatusDesc
        {
            get
            {
                return this.StatusDescField;
            }
            set
            {
                if ((object.ReferenceEquals(this.StatusDescField, value) != true))
                {
                    this.StatusDescField = value;
                    this.RaisePropertyChanged("StatusDesc");
                }
            }
        }
        
        /// <summary>ID statusu: 0 - proces neúspěšný, 1 - autentifikace úspěšná, 2 - uživatel nenalezen, 3 - nesprávné heslo.</summary>
        [DataMember()]
        public short StatusId
        {
            get
            {
                return this.StatusIdField;
            }
            set
            {
                if ((this.StatusIdField.Equals(value) != true))
                {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        /// <summary>Počet neúspěšných pokusů.</summary>
        [DataMember()]
        public int UnsuccessfulAttempts
        {
            get
            {
                return this.UnsuccessfulAttemptsField;
            }
            set
            {
                if ((this.UnsuccessfulAttemptsField.Equals(value) != true))
                {
                    this.UnsuccessfulAttemptsField = value;
                    this.RaisePropertyChanged("UnsuccessfulAttempts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>Data uživatele.</summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="User", Namespace="https://ws8websecdb.upc.cz/AuthService")]
    [Serializable()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string AppIdField;
        
        [OptionalField()]
        private string LoginField;
        
        [OptionalField()]
        private string PasswordField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>Aplikační identifikátor.</summary>
        [DataMember()]
        public string AppId
        {
            get
            {
                return this.AppIdField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AppIdField, value) != true))
                {
                    this.AppIdField = value;
                    this.RaisePropertyChanged("AppId");
                }
            }
        }
        
        /// <summary>Přihlašovací údaj.</summary>
        [DataMember()]
        public string Login
        {
            get
            {
                return this.LoginField;
            }
            set
            {
                if ((object.ReferenceEquals(this.LoginField, value) != true))
                {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        /// <summary>Heslo.</summary>
        [DataMember()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                if ((object.ReferenceEquals(this.PasswordField, value) != true))
                {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>Výsledek registrace.</summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="RegResult", Namespace="https://ws8websecdb.upc.cz/AuthService")]
    [Serializable()]
    public partial class RegResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string StatusDescField;
        
        [OptionalField()]
        private short StatusIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>Popis statusu.</summary>
        [DataMember()]
        public string StatusDesc
        {
            get
            {
                return this.StatusDescField;
            }
            set
            {
                if ((object.ReferenceEquals(this.StatusDescField, value) != true))
                {
                    this.StatusDescField = value;
                    this.RaisePropertyChanged("StatusDesc");
                }
            }
        }
        
        /// <summary>ID statusu: 0 - registrace neúspěšná, 1 - úspěšná registrace, 2 - registrace neúspěšná, uživatel již existuje.</summary>
        [DataMember()]
        public short StatusId
        {
            get
            {
                return this.StatusIdField;
            }
            set
            {
                if ((this.StatusIdField.Equals(value) != true))
                {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>Autentifikační služba.</summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", ConfigurationName="AuthService.IAuthSvc")]
    public interface IAuthSvc
    {
        
        // CODEGEN: Probíhá generování kontraktu zprávy, protože ve zprávě LoginResponse se nacházejí záhlaví
        /// <summary>Autentifikace.</summary>
        /// <param name="loginName">Přihlašovací údaj.</param>
        /// <param name="password">Heslo.</param>
        /// <param name="sourceId">Identifikace zdroje, např. IP adresa.</param>
        /// <returns>Výsledek autentifikace.</returns>
        [System.ServiceModel.OperationContractAttribute(Action="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/Login", ReplyAction="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/LoginResponse")]
        LoginResponse Login(LoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/Login", ReplyAction="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/LoginResponse")]
        System.Threading.Tasks.Task<LoginResponse> LoginAsync(LoginRequest request);
        
        // CODEGEN: Probíhá generování kontraktu zprávy, protože ve zprávě ChangePasswordRequest se nacházejí záhlaví
        /// <summary>Změna hesla.</summary>
        /// <param name="loginName">Přihlašovací údaj.</param>
        /// <param name="curPwd">Aktuální heslo.</param>
        /// <param name="newPwd">Nové heslo.</param>
        /// <returns>True, byla-li změna úspěšná, jinak false.</returns>
        [System.ServiceModel.OperationContractAttribute(Action="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/ChangePassword", ReplyAction="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/ChangePasswordResponse")]
        ChangePasswordResponse ChangePassword(ChangePasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/ChangePassword", ReplyAction="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/ChangePasswordResponse")]
        System.Threading.Tasks.Task<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest request);
        
        // CODEGEN: Probíhá generování kontraktu zprávy, protože ve zprávě RegisterResponse se nacházejí záhlaví
        /// <summary>Registace uživatele.</summary>
        /// <param name="user">Data uživatele.</param>
        /// <returns>Výsledek registrace.</returns>
        [System.ServiceModel.OperationContractAttribute(Action="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/Register", ReplyAction="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/RegisterResponse")]
        RegisterResponse Register(RegisterRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/Register", ReplyAction="https://ws8websecdb.upc.cz/AuthService/IAuthSvc/RegisterResponse")]
        System.Threading.Tasks.Task<RegisterResponse> RegisterAsync(RegisterRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login", WrapperNamespace="https://ws8websecdb.upc.cz/AuthService", IsWrapped=true)]
    public partial class LoginRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=0)]
        public string loginName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=2)]
        public string sourceId;
        
        public LoginRequest()
        {
        }
        
        public LoginRequest(string loginName, string password, string sourceId)
        {
            this.loginName = loginName;
            this.password = password;
            this.sourceId = sourceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginResponse", WrapperNamespace="https://ws8websecdb.upc.cz/AuthService", IsWrapped=true)]
    public partial class LoginResponse
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService")]
        public AuthToken AuthToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=0)]
        public AuthResult LoginResult;
        
        public LoginResponse()
        {
        }
        
        public LoginResponse(AuthToken AuthToken, AuthResult LoginResult)
        {
            this.AuthToken = AuthToken;
            this.LoginResult = LoginResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangePassword", WrapperNamespace="https://ws8websecdb.upc.cz/AuthService", IsWrapped=true)]
    public partial class ChangePasswordRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService")]
        public AuthToken AuthToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=0)]
        public string loginName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=1)]
        public string curPwd;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=2)]
        public string newPwd;
        
        public ChangePasswordRequest()
        {
        }
        
        public ChangePasswordRequest(AuthToken AuthToken, string loginName, string curPwd, string newPwd)
        {
            this.AuthToken = AuthToken;
            this.loginName = loginName;
            this.curPwd = curPwd;
            this.newPwd = newPwd;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangePasswordResponse", WrapperNamespace="https://ws8websecdb.upc.cz/AuthService", IsWrapped=true)]
    public partial class ChangePasswordResponse
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService")]
        public AuthToken AuthToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=0)]
        public bool ChangePasswordResult;
        
        public ChangePasswordResponse()
        {
        }
        
        public ChangePasswordResponse(AuthToken AuthToken, bool ChangePasswordResult)
        {
            this.AuthToken = AuthToken;
            this.ChangePasswordResult = ChangePasswordResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Register", WrapperNamespace="https://ws8websecdb.upc.cz/AuthService", IsWrapped=true)]
    public partial class RegisterRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=0)]
        public User user;
        
        public RegisterRequest()
        {
        }
        
        public RegisterRequest(User user)
        {
            this.user = user;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterResponse", WrapperNamespace="https://ws8websecdb.upc.cz/AuthService", IsWrapped=true)]
    public partial class RegisterResponse
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService")]
        public AuthToken AuthToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://ws8websecdb.upc.cz/AuthService", Order=0)]
        public RegResult RegisterResult;
        
        public RegisterResponse()
        {
        }
        
        public RegisterResponse(AuthToken AuthToken, RegResult RegisterResult)
        {
            this.AuthToken = AuthToken;
            this.RegisterResult = RegisterResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthSvcChannel : IAuthSvc, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthSvcClient : System.ServiceModel.ClientBase<IAuthSvc>, IAuthSvc
    {
        
        public AuthSvcClient()
        {
        }
        
        public AuthSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public AuthSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public AuthSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public AuthSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LoginResponse IAuthSvc.Login(LoginRequest request)
        {
            return base.Channel.Login(request);
        }
        
        public AuthToken Login(string loginName, string password, string sourceId, out AuthResult LoginResult)
        {
            LoginRequest inValue = new LoginRequest();
            inValue.loginName = loginName;
            inValue.password = password;
            inValue.sourceId = sourceId;
            LoginResponse retVal = ((IAuthSvc)(this)).Login(inValue);
            LoginResult = retVal.LoginResult;
            return retVal.AuthToken;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<LoginResponse> IAuthSvc.LoginAsync(LoginRequest request)
        {
            return base.Channel.LoginAsync(request);
        }
        
        public System.Threading.Tasks.Task<LoginResponse> LoginAsync(string loginName, string password, string sourceId)
        {
            LoginRequest inValue = new LoginRequest();
            inValue.loginName = loginName;
            inValue.password = password;
            inValue.sourceId = sourceId;
            return ((IAuthSvc)(this)).LoginAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ChangePasswordResponse IAuthSvc.ChangePassword(ChangePasswordRequest request)
        {
            return base.Channel.ChangePassword(request);
        }
        
        public bool ChangePassword(ref AuthToken AuthToken, string loginName, string curPwd, string newPwd)
        {
            ChangePasswordRequest inValue = new ChangePasswordRequest();
            inValue.AuthToken = AuthToken;
            inValue.loginName = loginName;
            inValue.curPwd = curPwd;
            inValue.newPwd = newPwd;
            ChangePasswordResponse retVal = ((IAuthSvc)(this)).ChangePassword(inValue);
            AuthToken = retVal.AuthToken;
            return retVal.ChangePasswordResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ChangePasswordResponse> IAuthSvc.ChangePasswordAsync(ChangePasswordRequest request)
        {
            return base.Channel.ChangePasswordAsync(request);
        }
        
        public System.Threading.Tasks.Task<ChangePasswordResponse> ChangePasswordAsync(AuthToken AuthToken, string loginName, string curPwd, string newPwd)
        {
            ChangePasswordRequest inValue = new ChangePasswordRequest();
            inValue.AuthToken = AuthToken;
            inValue.loginName = loginName;
            inValue.curPwd = curPwd;
            inValue.newPwd = newPwd;
            return ((IAuthSvc)(this)).ChangePasswordAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RegisterResponse IAuthSvc.Register(RegisterRequest request)
        {
            return base.Channel.Register(request);
        }
        
        public AuthToken Register(User user, out RegResult RegisterResult)
        {
            RegisterRequest inValue = new RegisterRequest();
            inValue.user = user;
            RegisterResponse retVal = ((IAuthSvc)(this)).Register(inValue);
            RegisterResult = retVal.RegisterResult;
            return retVal.AuthToken;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<RegisterResponse> IAuthSvc.RegisterAsync(RegisterRequest request)
        {
            return base.Channel.RegisterAsync(request);
        }
        
        public System.Threading.Tasks.Task<RegisterResponse> RegisterAsync(User user)
        {
            RegisterRequest inValue = new RegisterRequest();
            inValue.user = user;
            return ((IAuthSvc)(this)).RegisterAsync(inValue);
        }
    }
}
